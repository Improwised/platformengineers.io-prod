__NUXT_JSONP__("/blog/implementing-feature-flags-with-flipt", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){return {data:[{blog:{id:b,status:"published",sort:a,date_created:"2024-09-02T07:00:07.676Z",date_updated:"2024-09-06T09:28:00.450Z",slug:"implementing-feature-flags-with-flipt",title:g,description:"\u003Cp\u003E\u003Cstrong\u003E Effectively implement feature flags in your Golang application using Flipt and gRPC.\u003C\u002Fstrong\u003E This comprehensive guide covers everything from setting up Flipt to integrating it with your Golang service using gRPC.\u003C\u002Fp\u003E",seo_title:g,seo_description:"Effectively implement feature flags in your Golang application using Flipt and gRPC. This comprehensive guide covers everything from setting up Flipt to integrating it with your Golang service using gRPC.",content:"\u003Cp dir=\"ltr\"\u003EFeature flags are a powerful tool in software development, allowing developers to enable or disable features in their applications dynamically. This can be particularly useful for continuous delivery, A\u002FB testing, and managing the rollout of new features. In this blog, we will explore how to implement feature flags using Flipt, a self-contained feature flag solution, with Golang and gRPC. We will also delve into the benefits of using gRPC and how it can enhance internal communication and feature testing.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EWhat is Flipt?\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EFlipt is an open-source, self-hosted feature flag application that allows you to run experiments across services in your environment. It is built with Go and uses gRPC for communication, making it highly performant and scalable. The UI is built with Vue.js, providing a clean and intuitive interface for managing feature flags. (Here is the link to the GitHub page of Flipt: \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fflipt-io\u002Fflipt\"\u003Ehttps:\u002F\u002Fgithub.com\u002Fflipt-io\u002Fflipt\u003C\u002Fa\u003E )\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cstrong\u003EKey Features of Flipt\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003EFeature flags allow you to enable or disable features without modifying the source code or requiring a redeploy. This can be done at runtime, giving you the flexibility to control feature visibility without code changes.\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003EgRPC and REST APIs: Flipt supports both gRPC and REST APIs, allowing for high-performance and low-latency communication. This flexibility makes it easy to integrate with applications written in various languages.\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003EClient-Side Evaluation: Flipt supports client-side evaluation, which reduces the number of requests to the server and improves performance. This is particularly useful for applications that require real-time feature flag evaluations.\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003EGitOps Integration: Flipt is designed to integrate seamlessly with GitOps workflows, enabling continuous configuration and deployment. This ensures that feature flags are managed in a version-controlled manner, enhancing reliability and traceability. This is a reason alone to prefer Flipt because we are huge fans and \u003Ca href=\"https:\u002F\u002Fplatformengineers.io\u002Fblog\u002Fcontinuous-delivery-using-git-ops-principles-with-flux-cd\u002F\" target=\"_blank\" rel=\"noopener\"\u003Elongtime users of GitOps\u003C\u002Fa\u003E.\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003ESecurity and Control: Flipt supports various authentication methods, including HTTPS, OIDC, JWT, OAuth, and API tokens. This ensures that your feature flags are secure and can be managed without exposing your systems to external risks.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp dir=\"ltr\"\u003E\u003Cimg src=\"https:\u002F\u002Flh7-rt.googleusercontent.com\u002Fdocsz\u002FAD_4nXcv3hY4IpUie3XTXa8z4X7u1qxVyklbFx9is84VjLwHcNWe2COJMVoAXuVNG_SMz5lha3844FrXc8XzzwZ2jB8tx40VP3ywM9Sr6PC6uU7m8xUF_vlXQ0t98LC9JMdBNNo_j5HOhF3qqVZO6_tJKGKt4_Lo?key=bvaOmXXC4jN_fIEr3ulIUw\" width=\"900\" height=\"340\"\u003E&nbsp;&nbsp;\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EWhat is gRPC?\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EgRPC is a high-performance RPC framework that allows for efficient communication between microservices. It uses Protocol Buffers (protobuf) as the interface definition language and message format. gRPC is designed to work well with large-scale systems and is used by companies like Google and Netflix.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EAs a platform engineer, you may want to use gRPC for internal communication between services because it provides a number of benefits, including:\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EgRPC's explicit versioning and non-breaking changes ensure compatibility between different service versions. By defining API contracts in .proto files, clients and servers can negotiate capabilities during the RPC connection handshake. This allows for seamless communication even with different versions or extensions. gRPC supports non-breaking changes like adding new services, methods, or fields, ensuring existing clients continue to function without updates. This backward compatibility reduces the need for client notifications and updates, making it easier to manage service evolution.\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003EImproved performance: \u003C\u002Fstrong\u003EgRPC can help improve the performance of your services by reducing the overhead of serialization and deserialization.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003ESimplified error handling: \u003C\u002Fstrong\u003EgRPC provides a robust error handling mechanism that makes it easier to handle errors between services.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003EImproved security: \u003C\u002Fstrong\u003EgRPC provides built-in support for authentication and encryption, which can help improve the security of your services.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp dir=\"ltr\"\u003EgRPC offers several advantages that make it well-suited for microservices architecture. Its high performance and low latency design are ideal for real-time applications. The framework supports load balancing and failover, ensuring efficient scalability. gRPC's multi-language support allows for seamless integration with various programming languages, while its efficient protobuf serialization reduces data transfer overhead, resulting in faster communication between services.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EImplementing Feature Flags with Flipt Using Golang and gRPC&nbsp;\u003C\u002Fh2\u003E\n\u003Cp\u003E(\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fflipt-io\u002Fflipt\u002Ftree\u002Fmain\u002Fsdk\u002Fgo\"\u003Ehttps:\u002F\u002Fgithub.com\u002Fflipt-io\u002Fflipt\u002Ftree\u002Fmain\u002Fsdk\u002Fgo\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\" style=\"font-size: 20px;\"\u003EStep 1: Setting Up Flipt\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003ETo start using Flipt, you need to set up the server. You can do this by following the installation documentation provided by Flipt (\u003Ca href=\"https:\u002F\u002Fdocs.flipt.io\u002Fintroduction\"\u003Ehttps:\u002F\u002Fdocs.flipt.io\u002Fintroduction\u003C\u002Fa\u003E). Once the server is up and running, you can manage your feature flags through the UI or via the REST or gRPC APIs.\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\" style=\"font-size: 20px;\"\u003EStep 2: Creating a Golang Client\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003ETo integrate Flipt with your Golang application using gRPC, you need to generate the gRPC client. Flipt provides a pre-generated gRPC client for Go, which you can use directly.\u003C\u002Fp\u003E\n\u003Ch4 dir=\"ltr\"\u003EExample Golang Client Code\u003C\u002Fh4\u003E\n\u003Cdiv dir=\"ltr\" align=\"left\"\u003E\n\u003Cpre\u003E\u003Ccode\u003Epackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\tflipt \"go.flipt.io\u002Fflipt\u002Frpc\u002Fflipt\"\n\t\"go.flipt.io\u002Fflipt\u002Frpc\u002Fflipt\u002Fevaluation\"\n\tsdk \"go.flipt.io\u002Fflipt\u002Fsdk\u002Fgo\"\n\tfliptgrpc \"go.flipt.io\u002Fflipt\u002Fsdk\u002Fgo\u002Fgrpc\"\n\t\"google.golang.org\u002Fgrpc\"\n\t\"google.golang.org\u002Fgrpc\u002Fcredentials\u002Finsecure\"\n)\n\nfunc main() {\n\tconn, err := grpc.NewClient(\"localhost:9000\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\n\tif err != nil {\n\t\tlog.Fatal(\"error while connecting: \", err)\n\t}\n\tdefer conn.Close()\n\n\ttransport := fliptgrpc.NewTransport(conn)\n\n\tsdk := sdk.New(transport)\n\n\t\u002F\u002F For boolean flags\n\tfliptClient := sdk.Flipt()\n\tflag, err := fliptClient.GetFlag(context.Background(), &flipt.GetFlagRequest{\n\t\t\u002F\u002F NamespaceKey: \"my_namespace\", \u002F\u002F optional - uses the default namespace\n\t\tKey: \"test\",\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"error in fetching flag: %v\", err)\n\t}\n\n\tfmt.Println(\"Flag name: \", flag.Name)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3 dir=\"ltr\" style=\"font-size: 20px;\"\u003EStep 3: Integrating Feature Flags into Your Application\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EOnce you have the gRPC client set up, you can integrate feature flags into your application. This involves calling the EvalFlag method to determine whether a feature should be enabled or disabled for a given user.\u003C\u002Fp\u003E\n\u003Ch4 dir=\"ltr\"\u003EExample Integration\u003C\u002Fh4\u003E\n\u003Cpre\u003E\u003Ccode\u003Epackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\tflipt \"go.flipt.io\u002Fflipt\u002Frpc\u002Fflipt\"\n\t\"go.flipt.io\u002Fflipt\u002Frpc\u002Fflipt\u002Fevaluation\"\n\tsdk \"go.flipt.io\u002Fflipt\u002Fsdk\u002Fgo\"\n\tfliptgrpc \"go.flipt.io\u002Fflipt\u002Fsdk\u002Fgo\u002Fgrpc\"\n\t\"google.golang.org\u002Fgrpc\"\n\t\"google.golang.org\u002Fgrpc\u002Fcredentials\u002Finsecure\"\n)\n\nfunc main() {\n\tconn, err := grpc.NewClient(\"localhost:9000\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\n\tif err != nil {\n\t\tlog.Fatal(\"error while connecting: \", err)\n\t}\n\tdefer conn.Close()\n\n\ttransport := fliptgrpc.NewTransport(conn)\n\n\tsdk := sdk.New(transport)\n\n\t\u002F\u002F For boolean flags\n\tfliptClient := sdk.Flipt()\n\tflag, err := fliptClient.GetFlag(context.Background(), &flipt.GetFlagRequest{\n\t\t\u002F\u002F NamespaceKey: \"my_namespace\", \u002F\u002F optional - uses the default namespace\n\t\tKey: \"test\",\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"error in fetching flag: %v\", err)\n\t}\n\n\tfmt.Println(\"Flag name: \", flag.Name)\n\n\t\u002F\u002F For variant flags\n\tevaluationClient := sdk.Evaluation()\n\tvariantFlag, err := evaluationClient.Variant(context.Background(), &evaluation.EvaluationRequest{\n\t\t\u002F\u002F NamespaceKey: \"my_namespace\",\n\t\tFlagKey:  \"Color\",\n\t\tEntityId: \"my_entity_id\",\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error in fetching variant flag: %v\", err)\n\t}\n\tfmt.Println(\"Variant name: \", variantFlag.FlagKey) \n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3 dir=\"ltr\"\u003EAdding features in application (feature testing)\u003C\u002Fh3\u003E\n\u003Cp\u003EFeature testing is the process of testing new features in your application before they are released to production. This can be done using a variety of techniques, including:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\u003Cstrong\u003ECanaries:\u003C\u002Fstrong\u003E deploying a new feature to a small percentage of users to test its performance and behavior.\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\u003Cstrong\u003EA\u002FB testing:\u003C\u002Fstrong\u003E deploying two versions of a feature to different groups of users to compare their performance and behavior.\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\u003Cstrong\u003EFeature flags: \u003C\u002Fstrong\u003Eusing feature flags to enable or disable features in your application, and testing their performance and behavior.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EBy using feature flags, you can test new features in your application without affecting the user experience. You can also use feature flags to roll back features if they are not performing well.\u003Cstrong\u003E&nbsp;\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003EWhat is OpenFeature?\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EOpenFeature is a CNCF (Cloud Native Computing Foundation) Sandbox project aimed at developing an open standard for feature flag management. It provides a unified API and SDK, allowing for a developer-first, cloud-native implementation with extensibility for open-source and enterprise use cases.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EFlipt's OpenFeature provider offers a standardized and extensible way to manage feature flags. It integrates with Flipt's feature flags using the OpenFeature API, supporting both HTTP(s) and gRPC transports. The provider ensures compliance with the OpenFeature specification and includes hooks for custom actions. This integration benefits users by providing a standardized approach, fostering community-driven development, and simplifying integration with existing applications.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003ECommunity and Support\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EFlipt encourages community involvement and support for its OpenFeature integration. Users can reach out through Discord or email for feedback, to request specific language support, or to learn more about how Flipt can help their organization with feature flags.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EFlipt's support for OpenFeature enhances its feature management capabilities by providing a standardized, extensible, and developer-friendly way to manage feature flags, aligning with the principles of cloud-native and DevOps practices.\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cstrong\u003EConclusion\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EImplementing feature flags with Flipt using Golang and gRPC offers a robust and scalable solution for managing the rollout of new features, conducting A\u002FB testing, and ensuring continuous delivery. Flipt's use of gRPC ensures high-performance and low-latency communication, while its support for both gRPC and REST APIs enables easy integration with various applications. The client-side evaluation feature reduces server load, and GitOps integration enhances reliability and traceability. Flipt provides robust security measures and simplified error handling.&nbsp;\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EHowever, setting up Flipt and managing code complexity are initial challenges. Ensuring scalability and properly managing toggle configuration are also crucial considerations.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E",tags:a,time_to_read:"5 mins",user_created:{id:c,first_name:d,last_name:e,email:h,password:i,location:a,title:j,description:a,tags:a,avatar:f,language:a,tfa_secret:a,status:k,role:l,token:a,last_access:m,last_page:n,provider:o,external_identifier:a,auth_data:a,email_notifications:p,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},user_updated:{id:c,first_name:d,last_name:e,email:h,password:i,location:a,title:j,description:a,tags:a,avatar:f,language:a,tfa_secret:a,status:k,role:l,token:a,last_access:m,last_page:n,provider:o,external_identifier:a,auth_data:a,email_notifications:p,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},image:{id:"42f5d362-2eb5-44aa-8586-4e7bef5c211c",storage:"AMZ",filename_disk:"42f5d362-2eb5-44aa-8586-4e7bef5c211c.webp",filename_download:"p59dmijgeh8tdefpisjx.webp",title:"P59dmijgeh8tdefpisjx",type:"image\u002Fwebp",folder:"33b4de25-d0f2-4999-ba32-6883f9932c34",uploaded_by:c,created_on:q,modified_by:a,modified_on:"2024-09-02T06:59:54.408Z",charset:a,filesize:"13518",width:r,height:r,duration:a,embed:a,description:a,location:a,tags:a,metadata:{},focal_point_x:a,focal_point_y:a,tus_id:a,tus_data:a,uploaded_on:q},authors:[{id:37,pe_blog_id:b,directus_users_id:{first_name:"Munir",last_name:"Khakhi",avatar:"9f47a2fb-c13e-4cf3-99fa-7117ef11e769"}},{id:38,pe_blog_id:b,directus_users_id:{first_name:d,last_name:e,avatar:f}}]},_img:{"/_ipx/f_png/img/plateform-engineers.png":"\u002F_nuxt\u002Fimage\u002Fe7b705.png","/_ipx/f_png,s_68x55/img/plateform-engineers.png":"\u002F_nuxt\u002Fimage\u002F418082.png","/_ipx/f_png,s_32x40/https://data.improwised.com/assets/9f47a2fb-c13e-4cf3-99fa-7117ef11e769":"\u002F_nuxt\u002Fimage\u002F08abe5.png","/_ipx/f_png,s_32x40/https://data.improwised.com/assets/20d037d1-41ee-4efd-b034-1350a3ce336d":"\u002F_nuxt\u002Fimage\u002Fa07868.png","/_ipx/h_400,f_png/https://data.improwised.com/assets/42f5d362-2eb5-44aa-8586-4e7bef5c211c":"\u002F_nuxt\u002Fimage\u002F95b2c1.png","/_ipx/f_png,h_400/https://data.improwised.com/assets/42f5d362-2eb5-44aa-8586-4e7bef5c211c":"\u002F_nuxt\u002Fimage\u002F3b6f0e.png"}}],fetch:{},mutations:[]}}(null,27,"f6ae4b64-c3c4-4f35-8b41-9f48088de4b1","Angita","Shah","20d037d1-41ee-4efd-b034-1350a3ce336d","Implementing Feature Flags with Flipt Using Golang and gRPC","angita.shah@improwised.com","**********","SEO Specialist","active","5ef170ac-f2e9-4b93-a9ea-5c54fcf0fa40","2025-01-20T11:49:54.188Z","\u002Fcontent\u002Fpe_blog","default",true,"2024-09-02T06:59:54.060Z",1024)));